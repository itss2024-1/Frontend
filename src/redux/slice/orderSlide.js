import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { message } from 'antd';

const initialState = {
    orderList: [] // thông tin order
};

export const orderSlice = createSlice({
    name: 'order',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        doAddOrderAction: (state, action) => {
            let orderList = state.orderList;
            const item = action.payload;

            let isExistIndex = orderList.findIndex(c => c.id === item.id);
            if (isExistIndex > -1) {
                orderList[isExistIndex].quantity = orderList[isExistIndex].quantity + 1;
            } else {
                orderList.push({ quantity: 1, id: item.id, name: item.name, image: item.image });
            }
            //update redux
            state.orderList = orderList;
            message.success("Resume đã được thêm vào Giỏ hàng");
        },

        doUpdateOrderAction: (state, action) => {
            let orderList = state.orderList;
            const item = action.payload;
  
            let isExistIndex = orderList.findIndex(c => c._id === item._id);
            if (isExistIndex > -1) {
                orderList[isExistIndex].quantity = item.quantity;
                if (orderList[isExistIndex].quantity > orderList[isExistIndex].detail.quantity) {
                    orderList[isExistIndex].quantity = orderList[isExistIndex].detail.quantity;
                }
            } else {
                orderList.push({ quantity: item.quantity, id: item.id, detail: item.detail })
            }
            //update redux
            state.orderList = orderList;
        },
  
        doDeleteItemOrderAction: (state, action) => {
            state.orderList = state.orderList.filter(c => c.id !== action.payload.id);
        },
  
        doPlaceOrderAction: (state, action) => {
            state.orderList = [];
        }
  
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
  
    },
});

export const { doAddOrderAction, doUpdateOrderAction, doDeleteItemOrderAction, doPlaceOrderAction } = orderSlice.actions;


export default orderSlice.reducer;